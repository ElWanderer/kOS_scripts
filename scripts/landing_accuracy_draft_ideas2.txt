
FUNCTION stepBurnScore
{
  PARAMETER start_time, end_time, step, burn_score, burn_time.

  LOCAL max_acc IS SHIP:AVAILABLETHRUST / MASS.
  LOCAL spot IS LATLNG(LND_LAT, LND_LNG).

  LOCAL check_time IS start_time.
  UNTIL check_time > end_time {
    LOCAL time_diff IS check_time-TIME:SECONDS.
    LOCAL v IS VELOCITYAT(SHIP, check_time):SURFACE.


// original calculation:
//    LOCAL est_burn_dist IS v:SQRMAGNITUDE / (2 * max_acc).

// trying to calculate the burn distance taking into account non-constant acceleration:
    LOCAL dv IS v:MAG.
    LOCAL bt IS burnTime(dv). // lib_dv.ks, sets the calculated Isp and fuel rate for current stage

    LOCAL a IS -DV_FR.
    LOCAL b IS MASS.
    LOCAL c IS SHIP:AVAILABLETHRUST.

    // integral of a(t).dt at t=0
    LOCAL v_int_t0 IS -(c/a)*ln(b).
    // calculate the constant of integration based on known value of velocity (dv) at t0
    LOCAL C IS dv - v_int_t0.

    // integral of s(t).dt at t=0
    LOCAL s_int_t0 IS -(c/a) * b * ln(b) / a.
    // calculate the constant of integration based on known value of distance (0) at t0
    LOCAL D IS - s_int_t0.
    // integral of s(t).dt at t=bt
    LOCAL abt IS a*bt.
    LOCAL est_burn_dist IS D + (C*bt) - ((c/a) * (((abt+b)*ln(abt+b))-abt) / a).

    // note that this doesn't take into account having to pitch up to avoid dropping into terrain...

etc...



// draft
FUNCTION constantAltitudeVec2
{
  CLEARVECDRAWS().
pOut("constantAltitudeVec2").

  LOCAL final_vector IS UP:VECTOR.

  LOCAL spot IS LATLNG(LND_LAT,LND_LNG).
  LOCAL des_h_v IS VXCL(UP:VECTOR,spot:POSITION).
pOut("Distance to landing site: "+ROUND(des_h_v:MAG)+"m.").
  LOCAL cur_h_v IS VXCL(UP:VECTOR,VELOCITY:SURFACE).
pOut("Horizontal velocity: " + ROUND(cur_h_v:MAG,1) + "m/s.").
pOut("Vertical velocity: " + ROUND(SHIP:VERTICALSPEED,1) + "m/s.").

  // display-only code
  LOCAL spot_draw_v IS spot:ALTITUDEPOSITION(ALTITUDE).
  LOCAL spot_dist_string IS ROUND(des_h_v:MAG/1000,1)+"km".
  IF des_h_v:MAG < 1000 {
    SET spot_dist_string TO ROUND(des_h_v:MAG)+"m".
  }
  VECDRAW(V(0,0,0), spot_draw_v, RGB(1,0,0), "Landing site "+spot_dist_string, 1, TRUE).
  VECDRAW(spot_draw_v, spot:ALTITUDEPOSITION(spot:TERRAINHEIGHT)-spot_draw_v, RGB(1,0,0), "", 1, TRUE).
  VECDRAW(V(0,0,0), VELOCITY:SURFACE, RGB(1,1,0), "Current vel", 1, TRUE).
  // end of display

  // vertical acceleration requirement
  LOCAL v_x2 IS VXCL(UP:VECTOR,VELOCITY:ORBIT):SQRMAGNITUDE.
  LOCAL v_xs2 IS VXCL(UP:VECTOR,VELOCITY:SURFACE):SQRMAGNITUDE.
  LOCAL cent_acc IS v_x2 / (BODY:RADIUS + ALTITUDE).
  LOCAL target_v_acc IS 2 * MAX(0,LND_G_ACC - cent_acc + (LND_MIN_VS - SHIP:VERTICALSPEED)).
pOut("target_v_acc: " + ROUND(target_v_acc,2) + "m/s^2.").
  LOCAL min_pitch IS 0.
  IF target_v_acc > LND_THRUST_ACC OR LND_THRUST_ACC = 0 { SET min_pitch TO 90. }
  ELSE { SET min_pitch TO MAX(0,ARCSIN(target_v_acc / LND_THRUST_ACC)). }

  LOCAL max_h_acc IS LND_THRUST_ACC * COS(min_pitch).

  LOCAL target_h_acc IS 0.
  LOCAL h_thrust_v IS V(0,0,0).

  IF NOT LND_OVERSHOOT AND des_h_v:MAG > 1 AND VDOT(des_h_v:NORMALIZED, cur_h_v:NORMALIZED) < 0 {
    hudMsg("OVERSHOOT mode.").
    SET LND_OVERSHOOT TO TRUE.
  } ELSE IF LND_OVERSHOOT {
    LOCAL target_speed IS SQRT(des_h_v:MAG * max_h_acc) * 0.75.
    IF des_h_v:MAG < 150 { SET target_speed TO SQRT(des_h_v:MAG). }
    IF VDOT(des_h_v:NORMALIZED, cur_h_v) > target_speed {
      hudMsg("Ending OVERSHOOT mode.").
      SET LND_OVERSHOOT TO FALSE.
    } ELSE {
      // OVERSHOOT mode:
      SET h_thrust_v TO (target_speed * des_h_v:NORMALIZED) - cur_h_v.
      SET target_h_acc TO MIN(h_thrust_v:MAG * 5, max_h_acc).
pOut("target_h_acc: " + ROUND(target_h_acc,2) + "m/s^2.").
    }
  }

  IF NOT LND_OVERSHOOT {
    // non-overshoot case:
    IF des_h_v:MAG > 0.01 { SET target_h_acc TO MIN(v_xs2 / (2 * des_h_v:MAG), max_h_acc). }
pOut("target_h_acc: " + ROUND(target_h_acc,2) + "m/s^2.").
    SET h_thrust_v TO ((cur_h_v:MAG - target_h_acc) * des_h_v:NORMALIZED) - cur_h_v.
  }

  LOCAL target_total_acc IS SQRT(target_v_acc^2 + target_h_acc^2).
pOut("target_total_acc: " + ROUND(target_total_acc,2) + "m/s^2.").
  LOCAL target_pitch IS min_pitch.
  IF target_total_acc > 0 { SET target_pitch TO MIN(90,MAX(min_pitch,ARCCOS(target_h_acc/target_total_acc))). }
pOut("target_pitch: " + ROUND(target_pitch,2) + " degrees.").

  // steer towards target_pitch, but base throttle setting on actual_pitch
  IF target_pitch < 90 AND h_thrust_v:MAG > 0 {
    VECDRAW(V(0,0,0), 5 * h_thrust_v:NORMALIZED, RGB(0.3,0.3,1), "Horizontal thrust vector ", 1, TRUE).
    SET final_vector TO ANGLEAXIS(target_pitch,VCRS(-h_thrust_v,BODY:POSITION)) * h_thrust_v.
  }

  // actual pitch
  LOCAL actual_pitch IS 90 - VANG(UP:VECTOR,FACING:VECTOR).
pOut("actual_pitch: " + ROUND(actual_pitch,2) + " degrees.").

  // do we prioritise horizontal or vertical acceleration?
  IF LND_THRUST_ACC > 0 {
    LOCAL target_throttle IS 0.
    IF target_v_acc > 0 {
pOut("Vertical acceleration priority.").
      IF actual_pitch > 0 { SET target_throttle TO (target_v_acc / LND_THRUST_ACC) / COS(actual_pitch). }
    } ELSE {
pOut("Horizontal acceleration priority.").
      SET target_throttle TO VDOT(FACING:VECTOR,final_vector:NORMALIZED) * (target_h_acc / LND_THRUST_ACC).
    }
    SET LND_THROTTLE TO MIN(1,MAX(0,target_throttle)).
pOut("Throttle: " + ROUND(LND_THROTTLE,2)).
  }

  VECDRAW(V(0,0,0), 5 * FACING:VECTOR, RGB(0,1,0), "Current facing", 1, TRUE).
  VECDRAW(V(0,0,0), 10 * final_vector:NORMALIZED, RGB(0,0,1), "Desired facing", 1, TRUE).

  RETURN final_vector.
}
